from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.inline.channels import get_channels_keyboard, get_channel_actions_keyboard, get_reactions_keyboard
from services.channel_manager import ChannelManager
from states.states import ChannelStates

router = Router()

@router.message(Command("channels"))
async def cmd_channels(message: Message):
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
        reply_markup=get_channels_keyboard()
    )

@router.callback_query(F.data == "add_channel")
async def add_channel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ username"
    )
    await state.set_state(ChannelStates.waiting_for_channel)
    await callback.answer()

@router.message(ChannelStates.waiting_for_channel)
async def process_channel(message: Message, state: FSMContext, session: AsyncSession):
    channel_manager = ChannelManager(session)
    try:
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telethon
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        channel_id = 123456789  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Telethon
        username = message.text.strip('@')
        title = "Channel Title"  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Telethon
        
        await channel_manager.add_channel(
            user_id=message.from_user.id,
            channel_id=channel_id,
            username=username,
            title=title
        )
        
        await message.answer(
            f"–ö–∞–Ω–∞–ª {title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç–æ–≤:",
            reply_markup=get_reactions_keyboard()
        )
        await state.set_state(ChannelStates.waiting_for_reaction)
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await state.clear()

@router.callback_query(F.data.startswith("set_reaction_"))
async def set_reaction_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    reaction = callback.data.split("_")[2]
    channel_manager = ChannelManager(session)
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    channel_id = 1  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    await channel_manager.update_channel_reaction(channel_id, reaction)
    await callback.message.answer(f"–†–µ–∞–∫—Ü–∏—è {reaction} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "my_channels")
async def my_channels_callback(callback: CallbackQuery, session: AsyncSession):
    channel_manager = ChannelManager(session)
    channels = await channel_manager.get_user_channels(callback.from_user.id)
    
    if not channels:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return
    
    for channel in channels:
        await callback.message.answer(
            f"üì¢ {channel.channel_title}\n"
            f"üë§ @{channel.channel_username}\n"
            f"üí´ –†–µ–∞–∫—Ü–∏—è: {channel.reaction if channel.reaction else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}",
            reply_markup=get_channel_actions_keyboard(channel.id)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel_callback(callback: CallbackQuery, session: AsyncSession):
    channel_id = int(callback.data.split("_")[2])
    channel_manager = ChannelManager(session)
    
    if await channel_manager.delete_channel(channel_id):
        await callback.message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
    await callback.answer() 