from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import UserChannel, async_session
from database.query_orm import get_user_by_user_id
from keyboards.inline.channels import (
    get_channels_keyboard,
    get_channel_actions_keyboard,
    get_reactions_keyboard
)
from loader import bot, dp, app_logger
from services.channel_manager import ChannelManager
from states.states import ChannelStates


@dp.message(Command("my_channels"))
async def channels_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏",
        reply_markup=get_channels_keyboard()
    )


@dp.callback_query(F.data == "my_channels")
async def my_channels_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            user = await get_user_by_user_id(str(callback.from_user.id))
            channel_manager = ChannelManager(session)
            channels = await channel_manager.get_user_channels(user.id)

            if not channels:
                await callback.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                    reply_markup=get_channels_keyboard()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback.message.edit_text(
                await _get_channel_text(channels[0], channel_manager),
                reply_markup=get_channel_actions_keyboard(channels[0].id, 0, len(channels))
            )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ my_channels_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.callback_query(F.data.startswith("prev_channel_") | F.data.startswith("next_channel_"))
async def navigate_channel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"""
    try:
        async with async_session() as session:
            user = await get_user_by_user_id(str(callback.from_user.id))
            channel_manager = ChannelManager(session)
            channels = await channel_manager.get_user_channels(user.id)
            
            if not channels:
                await callback.answer("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            current_channel_id = int(callback.data.split("_")[-1])
            current_index = next((i for i, c in enumerate(channels) if c.id == current_channel_id), 0)
            
            if callback.data.startswith("prev_channel_"):
                new_index = current_index - 1
            else:
                new_index = current_index + 1

            if 0 <= new_index < len(channels):
                channel = channels[new_index]
                await callback.message.edit_text(
                    await _get_channel_text(channel, channel_manager),
                    reply_markup=get_channel_actions_keyboard(channel.id, new_index, len(channels))
                )
            else:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ navigate_channel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


async def _get_channel_text(channel: UserChannel, channel_manager: ChannelManager) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    text = f"üì¢ {channel.channel_title}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if channel.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
    last_reaction = await channel_manager.get_last_reaction(channel.id)
    if last_reaction:
        text += f"–†–µ–∞–∫—Ü–∏—è: {last_reaction.reaction}\n"
    else:
        text += "–†–µ–∞–∫—Ü–∏—è: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
        
    return text


@dp.callback_query(F.data == "add_channel")
async def add_channel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ username"
    )
    await state.set_state(ChannelStates.waiting_for_channel)
    await callback.answer()


@dp.message(ChannelStates.waiting_for_channel)
async def process_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        channel_link = message.text.strip()
        if not channel_link.startswith('@') and not channel_link.startswith('https://t.me/'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
            return

        async with async_session() as session:
            channel_manager = ChannelManager(session)
            user = await get_user_by_user_id(str(message.from_user.id))
            
            if channel_link.startswith('@'):
                channel_username = channel_link[1:]
            else:
                channel_username = channel_link.split('/')[-1]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = await bot.get_chat(f"@{channel_username}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É
            await channel_manager.add_channel(
                user_id=user.id,
                channel_id=channel.id,
                username=channel_username,
                title=channel.title
            )
            
            await state.clear()
            await message.answer(
                f"–ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=get_channels_keyboard()
            )
            
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_channels_keyboard()
        )
        await state.clear()


@dp.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel_callback(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª"""
    channel_id = int(callback.data.split("_")[-1])
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            success = await channel_manager.delete_channel(channel_id)
            
            if success:
                await callback.message.edit_text(
                    "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=get_channels_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞",
                    reply_markup=get_channels_keyboard()
                )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await callback.answer()


@dp.callback_query(F.data.startswith("change_reaction_"))
async def change_reaction_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏"""
    channel_id = int(callback.data.split("_")[-1])
    await state.update_data(channel_id=channel_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞",
        reply_markup=get_reactions_keyboard()
    )
    await state.set_state(ChannelStates.waiting_for_reaction)
    await callback.answer()


@dp.callback_query(ChannelStates.waiting_for_reaction)
async def process_reaction(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–∏"""
    reaction = callback.data.split("_")[-1]
    data = await state.get_data()
    channel_id = data["channel_id"]
    
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            success = await channel_manager.update_channel_reaction(channel_id, reaction)
            
            if success:
                await callback.message.edit_text(
                    f"–†–µ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {reaction}",
                    reply_markup=get_channels_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏",
                    reply_markup=get_channels_keyboard()
                )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "back_to_channels")
async def back_to_channels_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–æ–º"""
    try:
        await callback.message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
            reply_markup=get_channels_keyboard()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    except Exception as e:
        app_logger.error(f"Error in back_to_channels_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
