from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from config_data.config import API_HASH, API_ID
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import ReactionEmoji, ChatInviteAlready
from telethon.tl.functions.messages import ImportChatInviteRequest, CheckChatInviteRequest
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.network import ConnectionTcpAbridged
from services.services import service

from database.models import UserChannel, async_session
from database.query_orm import get_user_by_user_id
from keyboards.inline.channels import (
    get_channels_keyboard,
    get_channel_actions_keyboard,
    get_reactions_keyboard
)
from loader import bot, dp, app_logger
from services.channel_manager import ChannelManager
from states.states import ChannelStates
from services.account_manager import AccountService
import asyncio


@dp.message(Command("my_channels"))
async def channels_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏",
        reply_markup=get_channels_keyboard()
    )


@dp.callback_query(F.data == "my_channels")
async def my_channels_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            user = await get_user_by_user_id(str(callback.from_user.id))
            channel_manager = ChannelManager(session)
            channels = await channel_manager.get_user_channels(user.id)

            if not channels:
                await callback.message.edit_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                    reply_markup=get_channels_keyboard()
                )
                return

            await callback.message.edit_text(
                await _get_channel_text(channels[0], channel_manager),
                reply_markup=get_channel_actions_keyboard(channels[0].id, 0, len(channels))
            )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ my_channels_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.callback_query(F.data.startswith("prev_channel_") | F.data.startswith("next_channel_"))
async def navigate_channel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"""
    try:
        async with async_session() as session:
            user = await get_user_by_user_id(str(callback.from_user.id))
            channel_manager = ChannelManager(session)
            channels = await channel_manager.get_user_channels(user.id)
            
            if not channels:
                await callback.answer("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            current_channel_id = int(callback.data.split("_")[-1])
            current_index = next((i for i, c in enumerate(channels) if c.id == current_channel_id), 0)
            
            if callback.data.startswith("prev_channel_"):
                new_index = current_index - 1
            else:
                new_index = current_index + 1

            if 0 <= new_index < len(channels):
                channel = channels[new_index]
                await callback.message.edit_text(
                    await _get_channel_text(channel, channel_manager),
                    reply_markup=get_channel_actions_keyboard(channel.id, new_index, len(channels))
                )
            else:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –≤ navigate_channel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


async def _get_channel_text(channel: UserChannel, channel_manager: ChannelManager) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    text = f"üì¢ {channel.channel_title}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if channel.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    try:
        available_reactions, user_reactions = await channel_manager.get_channel_reactions(channel.id)
    except TelegramBadRequest:
        available_reactions, user_reactions = [], []
    user_reactions = available_reactions if user_reactions is None else user_reactions
    reactions_text = " ".join(user_reactions) if user_reactions else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    text += f"–†–µ–∞–∫—Ü–∏–∏: {reactions_text}\n"
        
    return text


@dp.callback_query(F.data == "add_channel")
async def add_channel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ username"
    )
    await state.set_state(ChannelStates.waiting_for_channel)
    await callback.answer()


@dp.message(ChannelStates.waiting_for_channel)
async def process_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    try:
        channel_link = message.text.strip()
        if not channel_link.startswith('@') and not channel_link.startswith('https://t.me/'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
            return

        async with async_session() as session:
            channel_manager = ChannelManager(session)
            user = await get_user_by_user_id(str(message.from_user.id))
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            accounts = await service.get_user_accounts(message.from_user.id)
            channels = await channel_manager.get_user_channels(user.id)
            user_channels = [channel.channel_title
                             for channel in channels]
            
            if not accounts:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account",
                    reply_markup=get_channels_keyboard()
                )
                await state.clear()
                return
                
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = accounts[0]
            
            if channel_link.startswith('@'):
                channel_username = channel_link[1:]
            else:
                channel_username = channel_link.split('/')[-1]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telethon –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                session_str = await service.decrypt_session(account.session)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è Telethon
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                client = TelegramClient(
                    session=StringSession(session_str),
                    api_id=API_ID,
                    api_hash=API_HASH,
                    connection=ConnectionTcpAbridged,
                    device_model="Samsung S24 Ultra",
                    app_version="10.2.0",
                    system_version="Android 14",
                    lang_code="en",
                    system_lang_code="en-US",
                    timeout=30,
                    auto_reconnect=False,
                    loop=loop
                )
                
                await client.connect()
                
                try:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    if "+" in channel_username:
                        invite = await client(CheckChatInviteRequest(channel_username[1:]))

                        if isinstance(invite, ChatInviteAlready):
                            # –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ, –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            channel = await client.get_entity(invite.chat.id)
                            full_channel = await client(GetFullChannelRequest(channel))
                        else:
                            # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∫–∞–Ω–∞–ª—É
                            await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É!")
                            return
                    else:
                        channel = await client.get_entity(channel_username)
                        full_channel = await client(GetFullChannelRequest(channel))

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    if channel.title in user_channels:
                        await message.answer("–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                        return

                    available_reactions = []
                    
                    if hasattr(full_channel.full_chat.available_reactions, 'reactions'):
                        reactions = full_channel.full_chat.available_reactions.reactions
                        if isinstance(reactions, list):
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ReactionEmoji –≤ —Å—Ç—Ä–æ–∫–∏
                            available_reactions = []
                            for r in reactions:
                                if isinstance(r, ReactionEmoji):
                                    available_reactions.append(str(r.emoticon))
                    else:
                        default_reactions = ["üëç", "‚ù§", "üëè", "üéâ", "ü§©", "üëå", "üòç",
                                             "‚ù§", "üíØ", "ü§£", "‚ö°", "üèÜ", "ü§ù", "‚úç"]
                        available_reactions = default_reactions
                finally:
                    await client.disconnect()
                    loop.close()
                    
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    reply_markup=get_channels_keyboard()
                )
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É
            channel_id = await channel_manager.add_channel(
                user_id=user.id,
                channel_id=channel.id,
                username=channel_username,
                title=channel.title,
                available_reactions=available_reactions
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                channel_id=channel_id,
                selected_reactions=[],
                available_reactions=available_reactions
            )
            
            await message.answer(
                f"–ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_reactions_keyboard(
                    [(r, f"reaction_{hash(r)}") for r in available_reactions],
                    []
                )
            )
            
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_channels_keyboard()
        )
        await state.clear()


@dp.callback_query(F.data.startswith("delete_channel_"))
async def delete_channel_callback(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª"""
    channel_id = int(callback.data.split("_")[-1])
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            success = await channel_manager.delete_channel(channel_id)
            
            if success:
                await callback.message.edit_text(
                    "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=get_channels_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞",
                    reply_markup=get_channels_keyboard()
                )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await callback.answer()


@dp.callback_query(F.data.startswith("change_reaction_"))
async def change_reaction_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏"""
    try:
        channel_id = int(callback.data.split("_")[-1])

        async with async_session() as session:
            channel_manager = ChannelManager(session)
            channel = await channel_manager.get_channel(channel_id)

            if not channel:
                await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
            try:
                available_reactions, user_reactions = await channel_manager.get_channel_reactions(channel.id)
            except TelegramBadRequest:
                available_reactions, user_reactions = [], []

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                channel_id=channel_id,
                selected_reactions=user_reactions or [],
                available_reactions=available_reactions
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏
            reactions_text = " ".join(user_reactions) if user_reactions else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"

            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.channel_title}\n"
                f"–¢–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {reactions_text}",
                reply_markup=get_reactions_keyboard(
                    [(r, f"reaction_{hash(r)}") for r in available_reactions],
                    user_reactions or []
                )
            )

    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.callback_query(F.data.startswith("reaction_"))
@dp.callback_query(F.data == "use_all_reactions")
@dp.callback_query(F.data == "finish_reactions")
async def process_reaction(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∞–∫—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("channel_id")
        selected_reactions = data.get("selected_reactions", [])
        available_reactions = data.get("available_reactions", [])
        
        if not channel_id:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            channel = await channel_manager.get_channel(channel_id)
            
            if not channel:
                await callback.answer("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if callback.data == "finish_reactions":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
                success = await channel_manager.update_channel_reaction(
                    channel_id, 
                    selected_reactions
                )
                
                if success:
                    await callback.message.edit_text(
                        f"–†–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.channel_title} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                        reply_markup=get_channels_keyboard()
                    )
                else:
                    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π")
                await state.clear()
                return
                
            elif callback.data == "use_all_reactions":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ"
                if len(selected_reactions) == len(available_reactions):
                    selected_reactions = []
                else:
                    selected_reactions = available_reactions.copy()
                    
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
                reaction_hash = callback.data.split("_")[1]
                selected_reaction = None
                
                for reaction in available_reactions:
                    if hash(reaction) == int(reaction_hash):
                        selected_reaction = reaction
                        break
                        
                if not selected_reaction:
                    await callback.answer("–û—à–∏–±–∫–∞: —Ä–µ–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
                if selected_reaction in selected_reactions:
                    selected_reactions.remove(selected_reaction)
                else:
                    selected_reactions.append(selected_reaction)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(selected_reactions=selected_reactions)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏
            reactions_text = " ".join(selected_reactions) if selected_reactions else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.channel_title}\n"
                f"–¢–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {reactions_text}",
                reply_markup=get_reactions_keyboard(
                    [(r, f"reaction_{hash(r)}") for r in available_reactions],
                    selected_reactions
                )
            )
            
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.callback_query(F.data == "back_to_channels")
async def back_to_channels_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–æ–º"""
    try:
        await callback.message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
            reply_markup=get_channels_keyboard()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    except Exception as e:
        app_logger.error(f"Error in back_to_channels_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
